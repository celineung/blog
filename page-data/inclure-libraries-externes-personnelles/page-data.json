{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/inclure-libraries-externes-personnelles",
    "result": {"data":{"markdownRemark":{"html":"<p>J'ai récemment eu l'occasion de développer une librairie de composants, et je souhaiterais rendre les utilisables dans mes projets <strong>sans avoir à publier la librairie sur npm</strong>.</p>\n<p>La structure de mon projet se présente de cette façon:</p>\n<ul>\n<li>my-repo\n<ul>\n<li>ui-components</li>\n<li>project1</li>\n</ul>\n</li>\n</ul>\n<p>Pour info, mon project1 est une application front Ember, et ui-components est un ensemble d'<a href=\"https://cli.emberjs.com/release/writing-addons/\">addons Ember</a>.</p>\n<p>Le but est de pouvoir accéder aux composants de ui-components depuis projet1.</p>\n<p>Les solutions abordées dans cet article seront:</p>\n<ul>\n<li>inclusion du module via filepath</li>\n<li>npm link</li>\n<li>npm workspace</li>\n<li>repository github</li>\n</ul>\n<p>##inclusion du module via filepath</p>\n<p>La solution la plus simple pour l'exemple étudié ici serait de spécifier directement l'emplacement du module dans le package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// project1/package.json\n\"devDependencies\": { \n  \"ui-components\": \"file:../ui-components\" \n}</code></pre></div>\n<p>Il suffit ensuite de faire un npm install ! On voit apparaître le dossier pix-ui dans le node_modules de project1.</p>\n<p>##npm link</p>\n<p>La deuxième piste explorée est l'utilisation de npm-link.</p>\n<p><em>npm-link</em> permet de charger un module depuis n'importe quel chemin sur l'ordinateur.</p>\n<p>Il s'utilise de la manière suivante:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd ui-components\n$ npm link\n$ cd ../project1\n$ npm link ui-components\n</code></pre></div>\n<p>La dernière commande npm link ui-components affiche sur la console:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/path/to/project1/node_modules/ui-components -> /usr/local/lib/node_modules/ui-components -> /path/to/ui-components</code></pre></div>\n<p>Il est explicite que derrière ces commandes, npm link crée un lien symbolique de ui-components vers notre node_modules global, puis de là vers le node_modules local de project1.</p>\n<p>Il est possible de faire afficher clairement ce lien symbolique:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls -al $(npm root -g)\nlrwxr-xr-x   1 username  admin    59B Mar 18 16:58 ui-components@ -> /path/to/ui-components</code></pre></div>\n<p>Ce n'est pas terminé, il faut définir dans le package.json de project1 la dépendance vers ui-components:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// project1/package.json\n\"devDependencies\": {\n  \"ui-components\": \"*\"\n}</code></pre></div>\n<p>Voilà! Il est désormais possible de faire npm install depuis project1 et d'utiliser les composants de ui-components depuis project1.</p>\n<blockquote>\n<p>Pour info, il est possible de supprimer ces liens de la même manière que l'on supprimerait des liens symboliques.</p>\n</blockquote>\n<blockquote>\n<p>Sinon, il est aussi possible d'exécuter npm unlink ui-components depuis project1 pour supprimer le lien symbolique local, puis npm unlink depuis ui-components pour supprimer le lien symbolique global.</p>\n</blockquote>\n<p>##npm-workspace</p>\n<p>npm-workspace est en quelque sorte un wrapper de npm link: il permet de centraliser les liens et nous évite d'avoir à écrire sur notre terminal tous les npm link manuellement.</p>\n<p>Il s'installe de manière globale:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -g npm-workspace</code></pre></div>\n<p>En considérant les mêmes projets (ui-components et project1), il suffit de créer un fichier workspace.json dans project1 contenant le nom du module et son chemin:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// project1/workspace.json\n{\n  \"links\": {\n    \"ui-components\": \"../ui-components\"\n  }\n}</code></pre></div>\n<p>Comme précédemment, il faut indiquer le nom de notre module dans le package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// project1/package.json\n\"devDependencies\": {\n  \"ui-components\": \"*\"\n}</code></pre></div>\n<p>Puis il suffit de lancer la commande npm-workspace install qui crée nos liens symboliques puis lance un npm install des autres modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm-workspace install</code></pre></div>\n<p>##repository github</p>\n<p>La dernière piste explorée consiste à simplement mettre le lien de notre librairie dans le package.json. D'après la documentation de <a href=\"https://docs.npmjs.com/cli/install\">npm install</a>, il est possible de spécifier l'installation de notre module via son chemin et sa branche github, bitbucket, ou encore gitlab.</p>\n<p>Toutefois cela nécessite que ui-components soit dans un repo entièrement séparé de project1. Je n'ai pas réussi à le faire fonctionner en les mettant tous les deux dans le même repo. Il semblerait que npm ne gère pas encore cela.</p>\n<p>Si j'avait mis les deux dans des repos séparés, il aurait suffit de modifier le package.json de cette manière:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// project1/package.json\n\"devDependencies\": { \n  \"ui-components\": \"github:username/ui-components#my-branch-name\" \n}</code></pre></div>\n<p>Il suffit ensuite de lancer <code class=\"language-text\">npm install</code> et la dépendance sera utilisable!</p>","excerpt":"J'ai récemment eu l'occasion de développer une librairie de composants, et je souhaiterais rendre les utilisables dans mes projets sans…","frontmatter":{"date":"2020-03-27","slug":"inclure-libraries-externes-personnelles","title":"Inclure mes libraries externes à mes projets front","illustration":{"childImageSharp":{"resize":{"src":"/static/50a34b9552760e8d0bd7a62398decc31/47498/hands_writing_in_journal_at_the_table.jpg","height":800,"width":1200}}}}}},"pageContext":{"slug":"inclure-libraries-externes-personnelles"}},
    "staticQueryHashes": ["3649515864","764694655"]}